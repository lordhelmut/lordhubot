# Description:
#   None
#
# Dependencies:
#   "level" : "latest"
#
# Configuration:
#   If not provided, 'LEVEL_BRAIN_PATH' will default to 'lvldb.hubot'.
#
# Commands:
#   None
#
# Authors:
#   lordhelmut

Level = require "level"

module.exports = (robot) ->
  prefix = 'hubot'
  db = Level(process.env.LEVEL_BRAIN_PATH or './lvldb.hubot', {valueEncoding:'json'})

  #getData = ->
  #  robot.logger.info "\n\n----- GetData running ----- \n"
  #  db.get "#{prefix}:storage", (err, reply) ->
  #    if err
  #      robot.logger.info if err.notFound "\n\n----- no data found!! -----\n"
  #      throw err
  #    else if reply
  #      #robot.logger.info JSON.parse(reply)
  #      robot.logger.info reply
  #      #robot.brain.mergeData JSON.parse(reply)
  #      robot.brain.mergeData reply
  #      robot.logger.info "\n\n----- Data for #{prefix} brain retrieved from LevelDB ----\n"
  #    else
  #      robot.logger.info "Initializing new data for #{prefix} brain"
  #      robot.brain.mergeData {}
  #getData()

  robot.logger.info "\n\n----- GetData running ----- \n"
  db.get "#{prefix}:storage", (err, reply) ->
    if err
      robot.logger.info if err.notFound "\n\n----- no data found!! -----\n"
      throw err
    else if reply
      #robot.logger.info JSON.parse(reply)
      robot.logger.info reply
      #robot.brain.mergeData JSON.parse(reply)
      robot.brain.mergeData reply
      robot.logger.info "\n\n----- Data for #{prefix} brain retrieved from LevelDB ----\n"
    else
      robot.logger.info "Initializing new data for #{prefix} brain"
      robot.brain.mergeData {}

  robot.brain.on 'save', (data) ->
    robot.logger.info "\n\n----- Save Brain running ----- \n"
    db.put "#{prefix}:storage", JSON.stringify data

  robot.brain.on 'close', (data) ->
    robot.logger.info "\n\n----- close Brain running ----- \n"
